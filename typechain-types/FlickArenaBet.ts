/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FlickArenaBetInterface extends utils.Interface {
  functions: {
    "MAX_DARTS_PER_TURN()": FunctionFragment;
    "MAX_ROUNDS()": FunctionFragment;
    "TARGET_SCORE()": FunctionFragment;
    "currentPlayerIndex()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "flickDart(uint256,address)": FunctionFragment;
    "gameEnded()": FunctionFragment;
    "gameStarted()": FunctionFragment;
    "getCurrentPlayer()": FunctionFragment;
    "getCurrentScore(uint256)": FunctionFragment;
    "getPlayerDartScores(uint256)": FunctionFragment;
    "getPlayerRoundScores(uint256,uint256)": FunctionFragment;
    "getPlayers()": FunctionFragment;
    "host()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "prizePool()": FunctionFragment;
    "registerAndBet()": FunctionFragment;
    "registerHost()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_DARTS_PER_TURN"
      | "MAX_ROUNDS"
      | "TARGET_SCORE"
      | "currentPlayerIndex"
      | "currentRound"
      | "flickDart"
      | "gameEnded"
      | "gameStarted"
      | "getCurrentPlayer"
      | "getCurrentScore"
      | "getPlayerDartScores"
      | "getPlayerRoundScores"
      | "getPlayers"
      | "host"
      | "players"
      | "prizePool"
      | "registerAndBet"
      | "registerHost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_DARTS_PER_TURN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ROUNDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TARGET_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPlayerIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flickDart",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "gameEnded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDartScores",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerRoundScores",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prizePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAndBet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerHost",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DARTS_PER_TURN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_ROUNDS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TARGET_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPlayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flickDart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameEnded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDartScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerRoundScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAndBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHost",
    data: BytesLike
  ): Result;

  events: {
    "BetPlaced(address,uint256)": EventFragment;
    "DartFlicked(address,uint256)": EventFragment;
    "GameDrawn(uint256)": EventFragment;
    "GameEnded(address)": EventFragment;
    "GameStarted()": EventFragment;
    "PlayerRegistered(address,uint256)": EventFragment;
    "PlayerWon(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DartFlicked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameDrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerWon"): EventFragment;
}

export interface BetPlacedEventObject {
  player: string;
  amount: BigNumber;
}
export type BetPlacedEvent = TypedEvent<
  [string, BigNumber],
  BetPlacedEventObject
>;

export type BetPlacedEventFilter = TypedEventFilter<BetPlacedEvent>;

export interface DartFlickedEventObject {
  player: string;
  score: BigNumber;
}
export type DartFlickedEvent = TypedEvent<
  [string, BigNumber],
  DartFlickedEventObject
>;

export type DartFlickedEventFilter = TypedEventFilter<DartFlickedEvent>;

export interface GameDrawnEventObject {
  refundAmount: BigNumber;
}
export type GameDrawnEvent = TypedEvent<[BigNumber], GameDrawnEventObject>;

export type GameDrawnEventFilter = TypedEventFilter<GameDrawnEvent>;

export interface GameEndedEventObject {
  winner: string;
}
export type GameEndedEvent = TypedEvent<[string], GameEndedEventObject>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameStartedEventObject {}
export type GameStartedEvent = TypedEvent<[], GameStartedEventObject>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface PlayerRegisteredEventObject {
  player: string;
  playerIndex: BigNumber;
}
export type PlayerRegisteredEvent = TypedEvent<
  [string, BigNumber],
  PlayerRegisteredEventObject
>;

export type PlayerRegisteredEventFilter =
  TypedEventFilter<PlayerRegisteredEvent>;

export interface PlayerWonEventObject {
  winner: string;
  prize: BigNumber;
}
export type PlayerWonEvent = TypedEvent<
  [string, BigNumber],
  PlayerWonEventObject
>;

export type PlayerWonEventFilter = TypedEventFilter<PlayerWonEvent>;

export interface FlickArenaBet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FlickArenaBetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_DARTS_PER_TURN(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ROUNDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TARGET_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    flickDart(
      score: BigNumberish,
      player: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    gameEnded(overrides?: CallOverrides): Promise<[boolean]>;

    gameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<[string]>;

    getCurrentScore(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayerDartScores(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    getPlayerRoundScores(
      playerIndex: BigNumberish,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlayers(overrides?: CallOverrides): Promise<[[string, string]]>;

    host(overrides?: CallOverrides): Promise<[string]>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        addr: string;
        score: BigNumber;
        bet: BigNumber;
      }
    >;

    prizePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerAndBet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerHost(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_DARTS_PER_TURN(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ROUNDS(overrides?: CallOverrides): Promise<BigNumber>;

  TARGET_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

  currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  flickDart(
    score: BigNumberish,
    player: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  gameEnded(overrides?: CallOverrides): Promise<boolean>;

  gameStarted(overrides?: CallOverrides): Promise<boolean>;

  getCurrentPlayer(overrides?: CallOverrides): Promise<string>;

  getCurrentScore(
    playerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerDartScores(
    playerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getPlayerRoundScores(
    playerIndex: BigNumberish,
    round: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlayers(overrides?: CallOverrides): Promise<[string, string]>;

  host(overrides?: CallOverrides): Promise<string>;

  players(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      addr: string;
      score: BigNumber;
      bet: BigNumber;
    }
  >;

  prizePool(overrides?: CallOverrides): Promise<BigNumber>;

  registerAndBet(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerHost(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_DARTS_PER_TURN(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ROUNDS(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    flickDart(
      score: BigNumberish,
      player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gameEnded(overrides?: CallOverrides): Promise<boolean>;

    gameStarted(overrides?: CallOverrides): Promise<boolean>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<string>;

    getCurrentScore(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerDartScores(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getPlayerRoundScores(
      playerIndex: BigNumberish,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlayers(overrides?: CallOverrides): Promise<[string, string]>;

    host(overrides?: CallOverrides): Promise<string>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        addr: string;
        score: BigNumber;
        bet: BigNumber;
      }
    >;

    prizePool(overrides?: CallOverrides): Promise<BigNumber>;

    registerAndBet(overrides?: CallOverrides): Promise<void>;

    registerHost(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BetPlaced(address,uint256)"(
      player?: null,
      amount?: null
    ): BetPlacedEventFilter;
    BetPlaced(player?: null, amount?: null): BetPlacedEventFilter;

    "DartFlicked(address,uint256)"(
      player?: null,
      score?: null
    ): DartFlickedEventFilter;
    DartFlicked(player?: null, score?: null): DartFlickedEventFilter;

    "GameDrawn(uint256)"(refundAmount?: null): GameDrawnEventFilter;
    GameDrawn(refundAmount?: null): GameDrawnEventFilter;

    "GameEnded(address)"(winner?: null): GameEndedEventFilter;
    GameEnded(winner?: null): GameEndedEventFilter;

    "GameStarted()"(): GameStartedEventFilter;
    GameStarted(): GameStartedEventFilter;

    "PlayerRegistered(address,uint256)"(
      player?: null,
      playerIndex?: null
    ): PlayerRegisteredEventFilter;
    PlayerRegistered(
      player?: null,
      playerIndex?: null
    ): PlayerRegisteredEventFilter;

    "PlayerWon(address,uint256)"(
      winner?: null,
      prize?: null
    ): PlayerWonEventFilter;
    PlayerWon(winner?: null, prize?: null): PlayerWonEventFilter;
  };

  estimateGas: {
    MAX_DARTS_PER_TURN(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ROUNDS(overrides?: CallOverrides): Promise<BigNumber>;

    TARGET_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    currentPlayerIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    flickDart(
      score: BigNumberish,
      player: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    gameEnded(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentScore(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerDartScores(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerRoundScores(
      playerIndex: BigNumberish,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    host(overrides?: CallOverrides): Promise<BigNumber>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    prizePool(overrides?: CallOverrides): Promise<BigNumber>;

    registerAndBet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    registerHost(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_DARTS_PER_TURN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_ROUNDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TARGET_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentPlayerIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flickDart(
      score: BigNumberish,
      player: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    gameEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPlayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentScore(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerDartScores(
      playerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerRoundScores(
      playerIndex: BigNumberish,
      round: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    host(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prizePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAndBet(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerHost(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
